in vec2 UV;
out float Output;

uniform sampler2D gColor;
uniform sampler2D gPosition;
uniform sampler2D gNormal;

uniform sampler2D SsaoNoiseTexture;
uniform vec3 SsaoNoiseTile;

// This must match the corresponding define in constants.h
const int SSAO_KERNEL_SIZE = 32;
uniform vec3 SsaoKernel[SSAO_KERNEL_SIZE];

uniform mat4 ViewProjection;

// Tuning
  float SsaoRadius = 0.35f;
  float DepthThreshold = 0.004f;
//

void main()
{
#if USE_SSAO_SHADER
  vec3  FragNormal   = texture(gNormal,   UV).rgb; // modelspace
  vec3  FragPosition = texture(gPosition, UV).rgb; // worldspace
  float FragDepth    = texture(gPosition, UV).w;   // Linear


  vec3 Noise = texture(SsaoNoiseTexture, UV*SsaoNoiseTile.xy).xyz;

  vec3 Up = FragNormal; // This must be true, because we're trying to reorient a hemisphere along the fragments normal.
  vec3 Right = normalize(cross(Noise - Up, Up));
  vec3 Front = normalize(cross(Up, Right));
  mat3 Reorientation = mat3(Right, Front, Up) * SsaoRadius;

  float AO = 1.0f;
  float OccluderContribution = 0.5f/float(SSAO_KERNEL_SIZE);

  // NOTE(Jesse): I was getting some artifacts when at 90deg to a surface so I
  // added a bias to the sample.
  /* float Bias = 0.0008f; */
  float Bias = 0.0000f;
  float BiasedFragDepth = FragDepth - Bias;

  for ( int KernelIndex = 0;
        KernelIndex < SSAO_KERNEL_SIZE;
        ++KernelIndex)
  {
    vec3 KernelP = Reorientation * SsaoKernel[KernelIndex];
    vec3 SampleP = KernelP + FragPosition;

    // Project SampleP
    vec4 Projected = ViewProjection * vec4(SampleP, 1);

    // Prespective divide
    vec2 SampleUV = Projected.xy / Projected.w;

    // NDC to screen space [-1, 1] -> [0, 1]
    SampleUV = (SampleUV.xy * 0.5) + 0.5;

    // get Sample depth:
    float SampleDepth = texture(gPosition, SampleUV).w;
    float DepthDelta = (BiasedFragDepth - SampleDepth);

#if 0
    float DistanceToThreshhold = DepthDelta - DepthThreshold;
    float ThreshholdPerc = clamp(DistanceToThreshhold / DepthThreshold, 0, 1);

    AO -= (OccluderContribution * ThreshholdPerc);
#else
    float Occluded = clamp((DepthDelta * 10000000.0f), 0.0f, 1.0f);

    if (DepthDelta < DepthThreshold)
      AO -= (OccluderContribution * Occluded);
#endif
  }

  Output = AO;
#else
  Output = 1.0f;
#endif

}
