
function counted_string
ToString(metaprogramming_directives Type)
{
  counted_string Result = {};
  switch (Type)
  {
    case noop: { Result = CS("noop"); } break;
    case generate_stream: { Result = CS("generate_stream"); } break;
    case generate_cursor: { Result = CS("generate_cursor"); } break;
    case generate_string_table: { Result = CS("generate_string_table"); } break;
    case generate_value_table: { Result = CS("generate_value_table"); } break;
    case for_enum_values: { Result = CS("for_enum_values"); } break;
    case for_members_in: { Result = CS("for_members_in"); } break;
    case d_union: { Result = CS("d_union"); } break;
  }
  return Result;
}


function void
ToValue(counted_string S, metaprogramming_directives* Result)
{
  *Result = (metaprogramming_directives)0;
  if (StringsMatch(CS("noop"), S)) { *Result = noop; }
  if (StringsMatch(CS("generate_stream"), S)) { *Result = generate_stream; }
  if (StringsMatch(CS("generate_cursor"), S)) { *Result = generate_cursor; }
  if (StringsMatch(CS("generate_string_table"), S)) { *Result = generate_string_table; }
  if (StringsMatch(CS("generate_value_table"), S)) { *Result = generate_value_table; }
  if (StringsMatch(CS("for_enum_values"), S)) { *Result = for_enum_values; }
  if (StringsMatch(CS("for_members_in"), S)) { *Result = for_members_in; }
  if (StringsMatch(CS("d_union"), S)) { *Result = d_union; }

}


